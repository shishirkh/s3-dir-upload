Author: Sahaji Khurshid
# This is a YAML-formatted file.
# POD Deployment file to deploy ZT-VNF Extension hcclustermonitor
# The below is hcclustermonitor-deployment.yaml for deployment of the hcclustermonitor
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: hcclustermonitor-cp1
  labels:
    app: hcclustermonitor-cp1
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"                                     # will be filled by chart name-chartversion from chart.yaml eg: exampleservice.0.1.0
    release: "{{ .Release.Name }}"                                                      # Will get filled by kubernetes
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{default 1 .Values.Replicas}}                                              # number of replicated pods to be created 
  template:
    metadata:
      annotations:
        chart: {{ .Chart.Version }}
      labels:
        app: hcclustermonitor-cp1
        vnfType: {{.Values.global.vnftype}}
        vnfName: {{.Values.global.vnfname}}
        serviceType: CLUSTER_MONITOR_SERVICE
        vnfcType: {{ .Values.global.vnfctype }}
        vnfMajorRelease: "{{ .Values.global.metadata_max_release }}"
        vnfMinorRelease: "{{ .Values.global.metadata_min_release }}"
    spec:
      #hostname: this will make the pod have same name(the value given here as opposed to random hostname) in kubernetes accross pod restarts
      serviceAccountName: hcclustermonitor-serviceaccount-{{.Release.Namespace}}                                   
      
      containers:
        - name: hcclustermonitor-container-cp1                                                         # name of container1 eg: examplecontainer1
          image: "{{ .Values.global.imageRegistry }}/hcclustermonitor:{{ .Values.image.hcclustermonitor.dockerTag }}"                # container image to be filled from values.yaml
          imagePullPolicy: "{{ .Values.image.hcclustermonitor.pullPolicy }}"                               # can take values always,IfNotPresent

          ports:
             - containerPort: 50057                                   # container port to send or accept traffic
               name: web-port
               protocol: TCP
          resources:
            requests:
              memory: {{ .Values.hcclustermonitor.resources.requests.memory | quote }}
              cpu: {{ .Values.hcclustermonitor.resources.requests.cpu | quote }}
            limits:
              memory: {{ .Values.hcclustermonitor.resources.limits.memory | quote }}
              cpu: {{ .Values.hcclustermonitor.resources.limits.cpu | quote }}
          env:
          - name: MONIT_PERIOD
            value: "60"
          - name: vnfName
            value: {{ .Release.Name }}   
          - name: "LogRetentionPeriod"
            value: "3600" 
         {{ if .Values.global.compaas }}
          - name: "deploymentNamespace"
            value: "{{.Release.Namespace}},{{ .Values.vnf.Namespace }}"
         {{ end }}
          volumeMounts:
          - mountPath: "/log"
            name: hcclustermonitor-storage
            
          - name: traker-logpath
            mountPath: "/tmp"

        - name: envoy-sidecar
          {{- include "envoysidecar.image" . | indent 10 }}
          imagePullPolicy: {{ .Values.image.envoyimage.pullPolicy }}
          securityContext:
            runAsUser: 70
          resources:
            requests:
              memory: {{ .Values.envoysidecar.resources.requests.memory | quote }}
              cpu: {{ .Values.envoysidecar.resources.requests.cpu | quote }}
            limits:
              memory: {{ .Values.envoysidecar.resources.limits.memory | quote }}
              cpu: {{ .Values.envoysidecar.resources.limits.cpu | quote }}
          command: ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
          ports:
            - containerPort: {{ .Values.envoyports.envoyContainerPort }}
              protocol: {{ .Values.envoyports.envoyContainerProtocol }}
          volumeMounts:
            - name: config
              mountPath: /etc/envoy
            - name: certs
              mountPath: /certs
            - name: shared-data-envoy
              mountPath: /var/DebugTrace/EnvoySideCar
          env:
            - name: secretuserzts
              valueFrom:
                secretKeyRef:
                  name: zts1ztssecret
                  key: username
            - name: secretpasswordzts
              valueFrom:
                secretKeyRef:
                  name: zts1ztssecret
                  key: password
            - name: CNNAME
              value: "{{ .Values.consulenv.ztslenvoylbregid }}-{{ .Values.global.clustername }}.service.{{ .Values.global.datacenter }}.{{.Release.Namespace}}.svc.cluster.local"
            - name: CASERVICEFQDN
              value: caserverservice.{{ .Release.Namespace }}.svc.cluster.local
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "EPS_ADDR"
              value: "localhost"
            - name: "EPS_PORT"
              value: "6061"
            - name: "DATACENTER"
              value: "{{ .Values.global.datacenter }}"
            - name: "CLUSTERNAME"
              value: "{{ .Values.global.clustername }}"
            - name: "METADATA_MAX_RELEASE"
              value: "{{ .Values.global.metadata_max_release }}"
            - name: "METADATA_MIN_RELEASE"
              value: "{{ .Values.global.metadata_min_release }}"
            - name: "VNFTYPE"
              value: "{{ .Values.global.vnftype }}"
            - name: "VNFNAME"
              value: "{{ .Values.global.vnfname }}"
            - name: "VNFCTYPE"
              value: "{{ .Values.global.vnfctype }}"
            - name: "traceLevel"
              value: "{{ .Values.global.counteralarmtracelevel }}"
            - name: "CHANNEL_BUFFER_SIZE"
              value: "{{ .Values.countersenv.channelbuffsize }}"

        - name: fluent-bit                                                   # name of container1 eg: examplecontainer1
          {{- include "logsidecar.image" . | indent 10 }}
          imagePullPolicy: "{{ .Values.image.fluentbitimage.pullPolicy }}"                                   # can take values always,IfNotPresent
          securityContext:
            runAsUser: 2006
          resources:
            requests:
              memory: {{ .Values.fluentbit.resources.requests.memory | quote }}
              cpu: {{ .Values.fluentbit.resources.requests.cpu | quote }}
            limits:
              memory: {{ .Values.fluentbit.resources.limits.memory | quote }}
              cpu: {{ .Values.fluentbit.resources.limits.cpu | quote }}
          env:
          - name: TARGET_IP
            value: "127.0.0.1"
          - name: TARGET_PORT
            value: "8080"
          - name: "traceLevel"
            value: "trace"
          - name: "logRetention"
            value: "2"
          - name: "logPath"
            value: "/tmp"
          - name: VNFNAME
            value: "{{ .Values.global.vnfname }}"
          - name: VNFCTYPE
            value: "cluster-monitor-agent"
          - name: VNFTYPE
            value: "{{ .Values.global.vnftype }}"
          - name: "VNFCNAME"
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          volumeMounts:
          - name: traker-logpath
            mountPath: "/var/log"
          - name: config-volume
            mountPath: /fluent-bit/etc
          - name: shared-data-envoy
            mountPath: /var/DebugTrace/EnvoySideCar

        - name:  {{ .Values.containers.consulagentName }}
          {{- include "consulagentsidecar.image" . | indent 10 }}
          imagePullPolicy: "{{ .Values.image.consulimage.pullPolicy }}"
          securityContext:
            runAsUser: 70
          resources:
            requests:
              memory: {{ .Values.consulagent.resources.requests.memory | quote }}
              cpu: {{ .Values.consulagent.resources.requests.cpu | quote }}
            limits:
              memory: {{ .Values.consulagent.resources.limits.memory | quote }}
              cpu: {{ .Values.consulagent.resources.limits.cpu | quote }}
          command: ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
          env:
           - name: MY_POD_IP
             valueFrom:
               fieldRef:
                 fieldPath: status.podIP
           - name: PODNAME
             valueFrom:
               fieldRef:
                 fieldPath: metadata.name
           - name: NAMESPACE
             valueFrom:
               fieldRef:
                 fieldPath: metadata.namespace
           - name: NODE_NAME
             value: {{ .Values.consulmetadata.name }}
           - name: NODE_SERVICE_NAME
             value: {{ .Values.consulserver.servicename }}
           - name: SERVICE_DOMAIN_NAME
             value: {{ .Values.consulagentenv.servicedomainName }}
           - name: DOMAIN_NAME
             value: "{{ .Release.Namespace }}.svc.cluster.local"
           - name: DATACENTER_VALUE
             value: {{ .Values.global.datacenter }}
           - name: CLIENT_BIND_IP
             value: {{ .Values.consulagentenv.agentbindip }}
          volumeMounts:
               - name: data
                 mountPath: /tmp/consul
          ports:
            - containerPort: 8500
              name: ui-port
            - containerPort: 8400
              name: alt-port
            - containerPort: 53
              name: udp-port
            - containerPort: 8600
              name: udp-port-dns
            - containerPort: 8443
              name: https-port
            - containerPort: 8080
              name: http-port
            - containerPort: 8301
              name: serflan
            - containerPort: 8302
              name: serfwan
            - containerPort: 8600
              name: consuldns
            - containerPort: 8300
              name: agent

        - name: "registrationcontainer"
          {{- include "consulregistrationsidecar.image" . | indent 10 }}
          imagePullPolicy: {{.Values.image.consulregistration.PullPolicy}} 
          securityContext:
            runAsUser: 11
          resources:
            requests:
              memory: {{ .Values.registration.resources.requests.memory | quote }}
              cpu: {{ .Values.registration.resources.requests.cpu | quote }}
            limits:
              memory: {{ .Values.registration.resources.limits.memory | quote }}
              cpu: {{ .Values.registration.resources.limits.cpu | quote }}
          env:
            - name: "SERVICENAME"
              value: "{{ .Values.consulenv.ztslenvoylbregid }}"
            - name: "SDSFQDN"
              value: "127.0.0.1"
            - name: "ZTSNAME"
              value: "{{ .Values.global.clustername }}"
            - name: MY_NODE_NAME
              valueFrom:
               fieldRef:
                 fieldPath: metadata.name

          command: ["sh","consulreg.sh"]

      volumes:
          - name: hcclustermonitor-storage
            emptyDir: {}
          - name: config
            configMap:
              name: configmapenvoyhcclustermonitor
          - name: data
            emptyDir: {}
          - name: traker-logpath
            emptyDir: {}
          - name: shared-data-envoy
            emptyDir: {}
          - name: config-volume
            configMap:
              name: fluent-bit-config-tracker-clustermonitor
          - name: certs
            emptyDir: {}

    
