Author: Santhi Abraham 
# This is a YAML-formatted file.
# POD Deployment file to deploy ZT-VNF Extension eventreceiver
# The below is eventreceiver-deployment.yamlfor deployment of the eventreceiver
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: eventreceiver-internal-zts1
  labels:
    app: eventreceiver-{{.Values.global.clustername}}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"                                     # will be filled by chart name-chartversion from chart.yaml eg: exampleservice.0.1.0
    release: "{{ .Release.Name }}"                                                      # Will get filled by kubernetes
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{default 2 .Values.Replicas}}                                              # number of replicated pods to be created 
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      annotations:
        chart: {{ .Chart.Version }}
      labels:
        app: eventreceiver-{{.Values.global.clustername}}
        vnfType: {{ .Values.global.vnftype }} 
        vnfName: "{{ .Values.global.vnfname }}"
        vnfMajorRelease: "{{ .Values.global.metadata_max_release }}"
        vnfMinorRelease: "{{ .Values.global.metadata_min_release }}"
        vnfcType: {{ .Values.global.vnfctype }}
        serviceType: EPS_SERVICE
    spec:
      hostname: eventreceiver-pod                                      # Optional, hostname of the exampleservice , fill in values.yaml
      
      containers:
        - name: eventreceiver-internal-zts1                                                          # name of container1 eg: examplecontainer1
          image: "{{ .Values.global.imageRegistry }}/eventreceiver:{{ .Values.image.eventreceiverimage.dockerTag }}"                # container image to be filled from values.yaml
          imagePullPolicy: "{{ .Values.image.eventreceiverimage.PullPolicy }}"                               # can take values always,IfNotPresent
          ports:
             - containerPort: 6666                                          # container port to send or accept traffic
          resources:
            requests:
              memory: {{ .Values.eventreceiver.resources.requests.memory | quote }}
              cpu: {{ .Values.eventreceiver.resources.requests.cpu | quote }}
            limits:
              memory: {{ .Values.eventreceiver.resources.limits.memory | quote }}
              cpu: {{ .Values.eventreceiver.resources.limits.cpu | quote }}
          env:
          - name: "eventreceiverListeningIP"
            value: "127.0.0.1"
          - name: "eventReceiverListenerPort"
            value: "6666"
          - name: "eventdbDialPort"
            value: "8888"
          - name: "eventdbDialPortPM"
            value: "8889"
          - name: "eventdbDialPortFM"
            value: "8887"     
          - name: "eventdbDialIP"
            value: "127.0.0.1"
          - name: "traceLevel"          # TraceLevel supported values- trace, info, warn, error,
            value: "error"          
          - name: "logRetention"
            value: "2"
          - name: "logPath"
            value: "/opt/log"
          - name: "MaximumRetriesOnErrors"
            value: "0"
          - name: "ContextTimeOutInMinutes"
            value: "3"
          - name: "EPS_ADDR"
            value: "localhost"
          - name: "EPS_PORT"
            value: "6666"  #Since eventreceiver should receive alarm
          - name: "DATACENTER"
            value: "{{ .Values.global.datacenter }}"
          - name: "CLUSTERNAME"
            value: "{{ .Values.global.clustername }}"
          - name: "METADATA_MAX_RELEASE"
            value: "{{ .Values.global.metadata_max_release }}"
          - name: "METADATA_MIN_RELEASE"
            value: "{{ .Values.global.metadata_min_release }}"
          - name: "VNFTYPE"
            value: "{{ .Values.global.vnftype }}"
          - name: "VNFNAME"
            value: "{{ .Values.global.vnfname }}"
          - name: "VNFCTYPE"
            value: "{{ .Values.global.vnfctype }}"
          - name: "traceLevel"
            value: "{{ .Values.global.counteralarmtracelevel }}"
          - name: "CHANNEL_BUFFER_SIZE"
            value: "{{ .Values.countersenv.channelbuffsize }}" 
          - name: "EVENTDBTYPE"
            value: "SPLIT"
          - name: "PODNAME"
            valueFrom:
              fieldRef:
                fieldPath: metadata.name

          volumeMounts:
          - name: shared-data
            mountPath: "/opt/log"


        - name: envoy-sidecar
          {{- include "envoysidecar.image" . | indent 10 }}
          imagePullPolicy: {{ .Values.image.envoy.PullPolicy }}
          securityContext:
            runAsUser: 70
          resources:
            requests:
              memory: {{ .Values.envoysidecar.resources.requests.memory | quote }}
              cpu: {{ .Values.envoysidecar.resources.requests.cpu | quote }}
            limits:
              memory: {{ .Values.envoysidecar.resources.limits.memory | quote }}
              cpu: {{ .Values.envoysidecar.resources.limits.cpu | quote }}
          command: ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
          ports:
          - containerPort: {{ .Values.envoyports.envoyContainerPort }}
          protocol: {{ .Values.envoyports.envoyContainerProtocol }}
          volumeMounts:
          - name: config
            mountPath: /etc/envoy
          - name: certs
            mountPath: /certs
          - name: shared-data-envoy
            mountPath: /var/DebugTrace/EnvoySideCar
          env:
            - name: secretuserzts
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.casecret }}
                  key: username
            - name: secretpasswordzts
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.casecret }}
                  key: password
            - name: CNNAME
              value: "eventreceiver-{{ .Values.global.clustername }}.service.{{ .Values.global.datacenter }}.{{.Release.Namespace}}.svc.cluster.local"
            - name: CASERVICEFQDN
              value: "caserverservice.{{.Release.Namespace}}.svc.cluster.local"
            - name: "EPS_ADDR"
              value: "localhost"
            - name: "EPS_PORT"
              value: "6666"  #Since eventreceiver should receive alarm
            - name: "DATACENTER"
              value: "{{ .Values.global.datacenter }}"
            - name: "CLUSTERNAME"
              value: "{{ .Values.global.clustername }}"
            - name: "METADATA_MAX_RELEASE"
              value: "{{ .Values.global.metadata_max_release }}"
            - name: "METADATA_MIN_RELEASE"
              value: "{{ .Values.global.metadata_min_release }}"
            - name: "VNFTYPE"
              value: "{{ .Values.global.vnftype }}"
            - name: "VNFNAME"
              value: "{{ .Values.global.vnfname }}"
            - name: "VNFCTYPE"
              value: "{{ .Values.global.vnfctype }}"
            - name: "traceLevel"
              value: "{{ .Values.global.counteralarmtracelevel }}"
            - name: "CHANNEL_BUFFER_SIZE"
              value: "{{ .Values.countersenv.channelbuffsize }}"
            - name: "NAMESPACE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: PODNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

        # fluent-bit-container
        - name: fluent-bit
          {{- include "logsidecar.image" . | indent 10 }}
          imagePullPolicy: {{ .Values.image.fluentbit.PullPolicy }}
          securityContext:
            runAsUser: 2006
          resources:
            requests:
              memory: {{ .Values.fluentbit.resources.requests.memory | quote }}
              cpu: {{ .Values.fluentbit.resources.requests.cpu | quote }}
            limits:
              memory: {{ .Values.fluentbit.resources.limits.memory | quote }}
              cpu: {{ .Values.fluentbit.resources.limits.cpu | quote }}
          volumeMounts:
            - name: shared-data
              mountPath: /var/log
            - name: shared-data-envoy
              mountPath: /var/DebugTrace/EnvoySideCar
            - name: config-volume
              mountPath: /fluent-bit/etc
          env:
            - name: FLUENTBIT_ARGS
              value: "-c /fluent-bit/etc/fluent-bit.conf"
            - name: TARGET_IP
              value: "127.0.0.1"
            - name: TARGET_PORT
              value: "8888"
            - name: "traceLevel"
              value: "error"
            - name: "logRetention"
              value: "2"
            - name: "logPath"
              value: "/opt/log"
            - name: VNFNAME
              value: "{{ .Values.global.vnfname }}"
            - name: VNFCTYPE
              value: "{{ .Values.global.vnfctype }}"
            - name: VNFTYPE
              value: "{{ .Values.global.vnftype }}" 
            - name: "VNFCNAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name 

        - name: {{ .Values.containers.consulagentName }}
          {{- include "consulagentsidecar.image" . | indent 10 }}
          imagePullPolicy: {{ .Values.image.consulimage.PullPolicy }}
          securityContext:
            runAsUser: 70
          resources:
            requests:
              memory: {{ .Values.consulagent.resources.requests.memory | quote }}
              cpu: {{ .Values.consulagent.resources.requests.cpu | quote }}
            limits:
              memory: {{ .Values.consulagent.resources.limits.memory | quote }}
              cpu: {{ .Values.consulagent.resources.limits.cpu | quote }}
          command: ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
          env:
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: PODNAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: NODE_NAME
            value: {{ .Values.consulmetadata.name }}
          - name: NODE_SERVICE_NAME
            value: {{ .Values.consulserver.servicename }}
          - name: SERVICE_DOMAIN_NAME
            value: {{ .Values.consulagentenv.servicedomainName }}
          - name: DOMAIN_NAME
            value: "{{ .Release.Namespace }}.svc.cluster.local" 
          - name: DATACENTER_VALUE
            value: {{ .Values.global.datacenter }}
          - name: CLIENT_BIND_IP
            value: {{ .Values.consulagentenv.agentbindip }}
          - name: SERVER_NUM
            value: "3"
          volumeMounts:
            - name: data
              mountPath: /tmp/consul
          ports:
            - containerPort: 8500
              name: ui-port
            - containerPort: 8400
              name: alt-port
            - containerPort: 53
              name: udp-port
            - containerPort: 8600
              name: udp-port-dns
            - containerPort: 8443
              name: https-port
            - containerPort: 8080
              name: http-port
            - containerPort: 8301
              name: serflan
            - containerPort: 8302
              name: serfwan
            - containerPort: 8600
              name: consuldns
            - containerPort: 8300
              name: agent
        - name: "registrationcontainer"
          {{- include "consulregistrationsidecar.image" . | indent 10 }}
          imagePullPolicy: {{.Values.image.consulregistration.PullPolicy}} 
          securityContext:
            runAsUser: 11
          resources:
            requests:
              memory: {{ .Values.registration.resources.requests.memory | quote }}
              cpu: {{ .Values.registration.resources.requests.cpu | quote }}
            limits:
              memory: {{ .Values.registration.resources.limits.memory | quote }}
              cpu: {{ .Values.registration.resources.limits.cpu | quote }}
          env:
            - name: "SERVICENAME"
              value: "{{ .Values.consulenv.ztslenvoylbregid }}"
            - name: "SDSFQDN"
              value: "127.0.0.1"
            - name: "ZTSNAME"
              value: "{{ .Values.global.clustername }}"
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

          command: ["sh","consulreg.sh"]
      volumes:
          - name: config
            configMap:
              name: configmapenvoyeventreceiver
          - name: shared-data-envoy
            emptyDir: {}
          - name: certs
            emptyDir: {}
          - name: shared-data
            emptyDir: {}
          - name: data
            emptyDir: {}
          - name: config-volume
            configMap:
              name: fluent-bit-config-eps-eventreceiver

      


