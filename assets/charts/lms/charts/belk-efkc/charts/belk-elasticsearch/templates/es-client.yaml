apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "elasticsearch.client.fullname" . }}
  labels:
    component: elasticsearch
    role: client
    release: {{ .Release.Name | quote }}
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: {{ .Values.global.seccompAllowedProfileNames }}
    seccomp.security.alpha.kubernetes.io/defaultProfileName: {{ .Values.global.seccompDefaultProfileName }}
spec:
  replicas: {{.Values.elasticsearch_client.replicas }} 
  template:
    metadata:
      labels:
        component: elasticsearch
        role: client
        release: {{ .Release.Name | quote }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/es-secret.yaml") . | sha256sum }}
        {{- if .Values.service.prometheus_metrics.enabled }}
        {{- if .Values.searchguard.enable }}
        prometheus.io/scheme: "https"
        {{ .Values.service.prometheus_metrics.pro_annotation_https_scrape }}: "true"
        {{- else }}
        prometheus.io/scrape: "true"
        {{- end }}
        prometheus.io/path: /_prometheus/metrics
        prometheus.io/port: "9200"
        {{- end }}
    spec:
      securityContext:
#       Because we are running as non root user and group id/User id of the elasticsearch user is 1000/1000.
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      {{- if or .Values.elasticsearch_client.antiAffinity .Values.elasticsearch_client.nodeAffinity }}
      affinity:
      {{- end }}
      {{- if eq .Values.elasticsearch_client.antiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  release: {{ .Release.Name | quote }}
                  component: elasticsearch
                  role: client
      {{- else if eq .Values.elasticsearch_client.antiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  release: {{ .Release.Name | quote }}
                  component: elasticsearch
                  role: client
      {{- end }}
      {{- with .Values.elasticsearch_client.nodeAffinity }}
        nodeAffinity:
{{ toYaml . | indent 10 }}
      {{- end }}
{{- if .Values.elasticsearch_client.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.elasticsearch_client.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.elasticsearch_client.tolerations }}
      tolerations:
{{ toYaml .Values.elasticsearch_client.tolerations | indent 8 }}
{{- end }}
      containers:
      - name: es-client 
        {{- if .Values.searchguard.enable }}
        image: {{.Values.global.registry}}/{{.Values.searchguard.image.repo}}:{{.Values.searchguard.image.tag}}
        {{- else }}
        image: {{.Values.global.registry}}/{{.Values.elasticsearch_master.image.repo}}:{{.Values.elasticsearch_master.image.tag}}
        {{- end }}
        imagePullPolicy: {{.Values.elasticsearch_master.ImagePullPolicy}}
        resources:
{{ toYaml .Values.elasticsearch_client.resources | indent 10 }}
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          capabilities:
             drop:
               - all
        readinessProbe:
          {{- if .Values.searchguard.enable }}
          httpGet:
            path: /_searchguard/health
            port: http
            scheme: HTTPS
          initialDelaySeconds: {{ .Values.elasticsearch_client.initialDelaySeconds }}
          periodSeconds: {{ .Values.elasticsearch_client.periodSeconds }}
          {{- else }}
          tcpSocket:
            port: {{.Values.service.client_port}}
          initialDelaySeconds: {{.Values.elasticsearch_client.initialDelaySeconds }}
          periodSeconds: {{ .Values.elasticsearch_client.periodSeconds }}
          {{- end }}

        #to restart the client pod if java heap exceeds and java process gets killed. 
        {{- if .Values.searchguard.enable }}
        livenessProbe:
          exec:
            command:
              - sh
              - -c
              - ps -A | grep java
          initialDelaySeconds: 120
          periodSeconds: 10
        {{- end }}
        env:
          - name: "CLUSTER_NAME"
            value: {{ printf "%s-%s" .Release.Namespace .Release.Name | quote }}
          - name: "NODE_MASTER"
            value: "false" 
          - name: "NODE_DATA"
            value: "false" 
          - name: "ES_JAVA_OPTS"
            value: "{{.Values.elasticsearch_client.es_java_opts}}"
          - name: "DISCOVERY_SERVICE"
            value: "{{ template "elasticsearch.fullname" . }}-discovery"
          - name: NETWORK_HOST
            value: "{{.Values.network_host}}"
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          {{- if .Values.searchguard.enable }}
          - name: HTTP_SSL
            value: "{{.Values.searchguard.http_ssl}}"
          - name: "KEYSTORE_TYPE"
            value: "{{.Values.searchguard.keystore_type}}"
          - name: "KEYSTORE_FILEPATH"
            value: "/etc/elasticsearch/certs/keystore.jks"
          - name: "KS_PWD"
            valueFrom:
              secretKeyRef:
                name: {{ template "fullname" . }}
                key: keypass
          - name: "TRUSTSTORE_TYPE"
            value: "{{.Values.searchguard.truststore_type}}"
          - name: "TRUSTSTORE_FILEPATH"
            value: "/etc/elasticsearch/certs/truststore.jks"
          - name: "TS_PWD"
            valueFrom:
              secretKeyRef:
                name: {{ template "fullname" . }}
                key: trustpass
          - name: "CLIENT_KEYSTORE_FILEPATH"
            value: "/etc/elasticsearch/certs/client-keystore.jks"
          - name: "AUTH_ADMIN_DN"
            value: "{{.Values.searchguard.auth_admin_identity}}"
          - name: "SG_CONFIG_DIRECTORY"
            value: "/usr/share/elasticsearch/plugins/search-guard-7/sgconfig/"
          {{- end }}
        ports:
        - containerPort: {{.Values.service.master_port}}
          name: transport 
          protocol: TCP
        - containerPort: {{.Values.service.client_port}}
          name: http 
          protocol: TCP
        volumeMounts:
        - name: datadir
          mountPath: /data
        {{- if .Values.searchguard.enable }}
        - name: ssl
          mountPath: "/etc/elasticsearch/certs/"
          readOnly: true
        - name: searchguard-config
          mountPath: "/usr/share/elasticsearch/plugins/search-guard-7/sgconfig/"
        {{- end }}
      volumes:
      - emptyDir:
          medium: "" 
        name: "datadir"
      {{- if .Values.searchguard.enable }}
      - name: ssl
        secret:
          secretName: {{ template "fullname" . }}
          items:
          - key: keystore.jks
            path: keystore.jks
          - key: truststore.jks
            path: truststore.jks
          - key: client-keystore.jks
            path: client-keystore.jks
          - key: admin.crt.pem
            path: admin.crt.pem
          - key: admin.key.pem
            path: admin.key.pem
          {{- if (and ( .Values.searchguard.keycloak_auth ) ( .Values.searchguard.base64_keycloak_rootca_pem )) }}
          - key: keycloak-rootca.pem
            path: keycloak_rootca.pem
          {{- end }}
      - configMap:
          name: {{ template "fullname" . }}-searchguard-config
        name: searchguard-config
      {{- end }}
