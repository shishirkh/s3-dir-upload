## ref: https://confluence.app.alcatel-lucent.com/display/plateng/HELM+Application+Deployment+-+LIFECYCLE#HELMApplicationDeployment-LIFECYCLE-RelocatableChart
### global registry
global:
 # This registry is used for elasticsearch image
 registry: csf-docker-delivered.repo.lab.pl.alcatel-lucent.com
 # This registry is used for cbur and kubectl images
 registry1: csf-docker-delivered.repo.lab.pl.alcatel-lucent.com 
 preheal: 0
 postheal: 0
 seccompAllowedProfileNames: docker/default
 seccompDefaultProfileName: docker/default

service:
  type: "ClusterIP"
  client_port: 9200
  client_nodeport: 30932
  master_port: 9300
  name: "elasticsearch"

  prometheus_metrics:
    enabled: false
    #If searchguard is enabled, you will have to create a custom scrape job in cpro chart. Refer belk user-guide for the same.
    #Prometheus annotation for scraping metrics from elaticsearch https endpoints. If this annotation is modified, make sure to add the same name in custom scrape job created in cpro chart.
    pro_annotation_https_scrape: "prometheus.io/scrape_es"

#network_host is set to _site_ by default for IPv4 env. To know more about network_host and configure this parameter, please refer https://www.elastic.co/guide/en/elasticsearch/reference/7.0/modules-network.html#network-interface-values
## For IPv6 environment, this can be set to "_global:ipv6_". If the network interface is known, you can set it to "_[networkInterface]:ipv6_". For ex: "_eth0:ipv6_"
network_host: "_site_"

#postscalein should be 0 to run postscalein job for cleaning up unused PVCs
postscalein: 0

elasticsearch_master:
  name: master
  replicas: 3
  image: 
    repo: lms/belk-efkc/elk_e
    tag: 7.0.1-19.12.0
  ImagePullPolicy: "IfNotPresent"
  resources:
    limits:
      cpu: "1"
      memory: "2Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"
  es_java_opts: "-Xms1g -Xmx1g"
  antiAffinity: "soft"
  nodeAffinity: {}
  nodeSelector: {}
  tolerations: []
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  initialDelaySeconds: 30
  periodSeconds: 10

esdata:
  name: data
  replicas: 2
  podweight: 100
  resources:
    limits:
      cpu: "1"
      memory: "4Gi"
    requests:
      cpu: "500m"
      memory: "2Gi"
  es_java_opts: "-Xms2g -Xmx2g"
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  antiAffinity: "soft"
  nodeAffinity: {}
  nodeSelector: {}
  tolerations: []

elasticsearch_client:
  name: client
  replicas: 3
  resources:
    limits:
      cpu: "1"
      memory: "4Gi"
    requests:
      cpu: "500m"
      memory: "2Gi"
  es_java_opts: "-Xms2g -Xmx2g"
  antiAffinity: "soft"
  nodeAffinity: {}
  nodeSelector: {}
  tolerations: []
  #If SG is enabled you may have to increase the initialDelaySeconds depending on your cluster
  initialDelaySeconds: 90
  periodSeconds: 20

  

persistence:
  #Supported storageClasses for BELK data are cinder, local-storage, hostpath.
  ## The value "" picks up the default storageClass configured in BCMT cluster.
  #If you want to use local storage as volume give "local-storage" in storageClassName.
  storageClassName: ""
  accessMode: ReadWriteOnce
  size: 5Gi
  # Size of persistent storage for master pod to persist cluster state
  masterStorage: 1Gi
  # set auto_delete to true if you want the persistent volume to also get deleted on deletion of the release.
  # This will delete all the previsous data stored in the persistent volume.
  # When local storage is used it will deleted only PVC not PV.
  auto_delete: false

# Backup and restore supports only with Cinder adn GlusterFS
backup_restore:
  ## The name of the storage class which the cluster should use for backup and restore. GlusterFS should use only when you need to take backup and restore the data
  storageClassName: glusterfs-storageclass
  ## The size of the PersistentVolume to allocate to each BELK es-data Pod in the StatefulSet
  ## For production servers this number should likely be much larger.
  size: 25Gi
  

cbur:
  enabled: false
  #an integer. This value only applies to statefulset. The value can be 0,1 or 2.
  #Recommended value of brOption for BELK is 0.
  brOption: 0
  #the maximum copy you want to saved.
  maxCopy: 5
  #Modes supported now: "local","NETBKUP","AVAMAR","CEPHS3","AWSS3", case insensitive
  backendMode: "local"
  #It is used for scheduled backup task
  cronJob: "0 23 * * *"
  #Set below parameters to true for auto enabling cron job
  autoEnableCron: false

  cbura:
    imageRepo: cbur/cbura
    imageTag: 1.0.3-983
    imagePullPolicy: IfNotPresent
    userId: 1000
    resources:
      limits:
        cpu: "1"
        memory: "2Gi"
      requests:
        cpu: "500m"
        memory: "1Gi" 
    #tmp_size is the mounted volume size of /tmp directory for cbur-sidecar. 
    #The value should be around double the size of backup_restore.size
    tmp_size: 50Gi

kubectl:
  image:
    repo: lms/belk-efkc/kubectl
    tag: v1.14.10-nano

jobResources:
  requests:
    cpu: 200m
    memory: 500Mi
  limits:
    cpu: 1
    memory: 1Gi


searchguard:
  image:
    repo: elk_e_sg
    tag: 7.0.1-19.12.03
  enable: false
  keycloak_auth: false
  base64_keycloak_rootca_pem: <base64 format of keycloak rootCA pem>
  http_ssl: true
  user_name: admin
 
  # Create base64 encoding for keystore, keystorepasswd, truststore, truststorepasswd file and provide to below variables.
  # base64 encoding for passwords use below command
  # echo -n <string in double quotes> | base64
  # base64 encoding for files  use below command
  # base64 <filename>  | tr -d '\n' 
  keystore_type: JKS
  truststore_type: JKS
  base64Keystore: <base64-keystore>
  base64KeystorePasswd: <base64-keypass>
  base64Truststore: <base64-truststore>
  base64TruststorePasswd: <base64-trustpass>
  base64ClientKeystore: <base64-clientkeystore>
  base64RootCA: <base64-rootcapem>
  base64_client_cert: <base64-client-cert>
  base64_client_key: <base64-client-key>
  auth_admin_identity: <CN=admin,C=ELK>

  sg_configmap:
    sg_internal_users_yml: |-
      ---
      _sg_meta:
        type: "internalusers"
        config_version: 2
      admin:
        reserved: true
        hidden: false
        hash: "$2a$12$VcCDgh2NDk07JGN0rjGbM.Ad41qVR/YFJcgHp0UGns5JDymv..TOG"
        backend_roles:
        - "admin"

    # refer https://docs.search-guard.com/latest/action-groups 
    sg_action_groups_yml: |-
      ---
      _sg_meta:
        type: "actiongroups"
        config_version: 2
    sg_config_yml: |-
      ---
      _sg_meta:
        type: "config"
        config_version: 2
      sg_config:
        dynamic:
          http:
            anonymous_auth_enabled: false
            xff:
              enabled: false
              internalProxies: ".+"
          authc:
            basic_internal_auth_domain:
              http_enabled: true
              transport_enabled: true
              order: 0
              http_authenticator:
                type: "basic"
                challenge: true   # Set this to false when keycloak authentication is enabled
                config: {}
              authentication_backend:
                type: "intern"
                config: {}
            keycloak_auth_domain:
              http_enabled: false              # Set to true to enable keycloak authentication
              transport_enabled: true
              order: 1
              http_authenticator:
                type: keycloak
                challenge: false
                config:
                  username_key: preferred_username
                  roles_key: <roles>
                  keycloak_connect_url: https://<keycloak_ip>:<port>/auth/realms/<realm_name>/.well-known/openid-configuration
                  client_id: <client_id>
                  client_secret: <client_secret>
              authentication_backend:
                  type: noop
            proxy_auth_domain:
              http_enabled: false
              transport_enabled: false
              order: 3
              http_authenticator:
                type: "proxy"
                challenge: false
                config:
                  user_header: "x-proxy-user"
                  #roles_header: "x-proxy-roles"
              authentication_backend:
                type: "noop"
                config: {}
            clientcert_auth_domain:
              http_enabled: false
              transport_enabled: false
              order: 2
              http_authenticator:
                type: "clientcert"
                config:
                  username_attribute: "cn"
                challenge: false
              authentication_backend:
                type: "noop"

    #refer https://docs.search-guard.com/latest/roles-permissions
    sg_roles_yml: |-
      ---
      _sg_meta:
        type: "roles"
        config_version: 2

    #refer https://docs.search-guard.com/latest/role-mapping-modes
    sg_roles_mapping_yml: |-
      ---
      _sg_meta:
        type: "rolesmapping"
        config_version: 2
      SGS_ALL_ACCESS:
        reserved: true
        hidden: false
        backend_roles:
        - "admin"
        description: "Migrated from v6"

      SGS_OWN_INDEX:
        reserved: false
        hidden: false
        users:
        - "*"
      SGS_KIBANA_USER:
        reserved: false
        backend_roles:
        - "kibanauser"
        description: "Maps kibanauser to SGS_KIBANA_USER"
      SGS_READALL:
        reserved: true
        backend_roles:
        - "readall"
      SGS_KIBANA_SERVER:
        reserved: true
        users:
        - "kibanaserver"


    sg_tenants_yml: |-
      ---
      _sg_meta:
        type: "tenants"
        config_version: 2

