apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: {{ template "name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: "{{ .Values.controller.name }}"
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: {{ template "controller.fullname" . }}
data:
{{- if .Values.controller.workerProcessAsRoot }}
  worker-process-as-root: "{{ .Values.controller.workerProcessAsRoot }}"
{{- end }}
{{- if (or (.Values.grafanaURL) (.Values.metrics)) }}
  enable-vts-status: "true"
{{- end }}
{{- if .Values.controller.bindAddress }}
  bind-address: "{{ .Values.controller.bindAddress }}"
{{- end }}
{{- if .Values.controller.reusePort }}
  reuse-port: "{{ .Values.controller.reusePort }}"
{{- end }}
{{- if .Values.controller.disableIvp6 }}
  disable-ipv6: "{{ .Values.controller.disableIvp6}}"
{{- end }}
{{- if .Values.controller.httpRedirectCode }}
  http-redirect-code: "{{ .Values.controller.httpRedirectCode }}"
{{- end }}
{{- if eq .Values.controller.logToJsonFormat true }}
  clog-harmonized-enable: "true"
  log-format-upstream: quote{"type":"log","level":"INFO","facility":"23","time":"$time_iso8601","timezone":"$clog_tz","process":"nginx","system":"CITM Ingress Controller","systemid":"$clog_systemid","host":"$hostname","log":{"message":"[$the_real_ip] - [$remote_user] [$request] $status $body_bytes_sent [$http_referer] [$http_user_agent] $request_length $request_time [$proxy_upstream_name] $upstream_addr $upstream_response_length $upstream_response_time $upstream_status $req_id"}}
  log-format-stream: quote{"type":"log","level":"INFO","facility":"23","time":"$time_iso8601","timezone":"$clog_tz","process":"nginx","system":"CITM Ingress Controller","systemid":"$clog_systemid","host":"$hostname","log":{"message":"Streaming $protocol $status $bytes_sent $bytes_received $session_time $connection $remote_addr:$remote_port $upstream_addr"}}
{{- end }}  
  clog-harmonized-enable: "{{ .Values.controller.logToJsonFormat }}"
  split-ipv4-ipv6-stream-backend: "{{ .Values.controller.splitIpv4Ipv6StreamBackend }}"
  ssl-protocols: "{{ .Values.controller.sslProtocols }}"
  ssl-ciphers: "{{ .Values.controller.sslCiphers }}"  
{{- if .Values.controller.blockCidrs }}
  block-cidrs: {{ .Values.controller.blockCidrs }}
{{- end }}
{{- if .Values.controller.blockUserAgents }}
  block-user-agents: {{ .Values.controller.blockUserAgents }}
{{- end }}
{{- if .Values.controller.blockReferers }}
  block-referers: {{ .Values.controller.blockReferers }}
{{- end }}
  snippet-namespaces-allowed: {{ .Values.controller.snippetNamespaceAllowed }}
  denied-in-snippet: "{{ .Values.controller.deniedInSnippetCode }}"
{{- if (and (eq .Values.controller.service.type "NodePort") (not (empty .Values.controller.service.nodePorts.http))) }}
  citm-forwarded-port-http: "{{ .Values.controller.service.nodePorts.http }}"
{{- else }}
  {{- if (and (not  (.Values.controller.forcePort)) (not (empty .Values.controller.httpPort))) }}
  citm-forwarded-port-http: "{{ .Values.controller.httpPort }}"
  {{- else }}
  citm-forwarded-port-http: "80"
{{- end }}  
{{- end }}
{{- if (and (eq .Values.controller.service.type "NodePort") (not (empty .Values.controller.service.nodePorts.https))) }}
  citm-forwarded-port-https: "{{ .Values.controller.service.nodePorts.https }}"
{{- else }}
  {{- if (and (not  (.Values.controller.forcePort)) (not (empty .Values.controller.httpsPort))) }}
  citm-forwarded-port-https: "{{ .Values.controller.httpsPort }}"
  {{- else }}
  citm-forwarded-port-https: "443"
{{- end }}  
{{- end }}
{{- range $key, $value := .Values.controller.config }}
  {{ $key }}: "{{ $value }}"
{{- end }}
---
{{- if .Release.IsInstall }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.controller.electionID }}-{{ .Values.controller.ingressClass }}
{{- end }}

