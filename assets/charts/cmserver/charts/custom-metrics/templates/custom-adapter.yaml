apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: custom-metrics-apiserver
    release: {{ .Release.Name }}
  name: custom-metrics-apiserver
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: custom-metrics-apiserver
  template:
    metadata:
      annotations:
        chart: {{ .Chart.Version }}
      labels:
        app: custom-metrics-apiserver
        release: {{ .Release.Name }}
        vnfType  : {{ .Values.global.vnftype }}
        vnfName :  {{ .Values.global.vnfname }}
        vnfcType : {{ .Values.global.vnfctype }}
        serviceType: CM
        vnfMajorRelease: "{{ .Values.global.metadata_max_release }}"
        vnfMinorRelease: "{{ .Values.global.metadata_min_release }}"
      name: custom-metrics-apiserver
    spec:
      serviceAccountName: custom-metrics-apiserver
      volumes:
      - name: cmabackup
        emptyDir: {}

      - name: config
        configMap:
          name: configmapcma

      - name: certs
        emptyDir: {}

      - name: data
        emptyDir: {}

      - name: shared-data
        emptyDir: {}

      - name: shared-data-envoy
        emptyDir: {}

      - name: config-volume
        configMap:
          name: fluent-bit-config-custommetric
      containers:
      - name: kubectlcontainer
        image: "{{ .Values.global.imageRegistry }}/kubectlweb:{{ .Values.image.kubectlweb.dockerTag }}"
        imagePullPolicy: {{ .Values.image.kubectlweb.pullPolicy }}
        ports:
          - containerPort: 9090
            name: kubectl
        resources:
          requests:
            memory: {{ .Values.kubectl.resources.requests.memory | quote }}
            cpu: {{ .Values.kubectl.resources.requests.cpu | quote }}
          limits:
            memory: {{ .Values.kubectl.resources.limits.memory | quote }}
            cpu: {{ .Values.kubectl.resources.limits.cpu | quote }}
        env:
          - name: "SECRET"
            value: "Basic cm9vdDp5dF94azM5Yg=="
          - name: "NAMESPACE"
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        volumeMounts:
          - name: shared-data
            mountPath: "/dump/K8STrace/webHook"
          - name: cmabackup
            mountPath: "/opt/cmabackup"
      - name: cbura-sidecar
        {{- include "cburasidecar.image" . | indent 8 }}
        imagePullPolicy: {{ .Values.image.cbura.PullPolicy }}
        securityContext:
          runAsUser: 2002
        resources:
          requests:
            memory: {{ .Values.cburasidecar.resources.requests.memory | quote }}
            cpu: {{ .Values.cburasidecar.resources.requests.cpu | quote }}
          limits:
            memory: {{ .Values.cburasidecar.resources.limits.memory | quote }}
            cpu: {{ .Values.cburasidecar.resources.limits.cpu | quote }}
        volumeMounts:
          - name: cmabackup
            mountPath: "/cmabackup"
      - name: fluent-bit
        {{- include "logsidecar.image" . | indent 8 }}
        imagePullPolicy: {{.Values.image.fluentbit.pullPolicy}}
        securityContext:
          runAsUser: 2006
        resources:
          requests:
            memory: {{ .Values.fluentbit.resources.requests.memory | quote }}
            cpu: {{ .Values.fluentbit.resources.requests.cpu | quote }}
          limits:
            memory: {{ .Values.fluentbit.resources.limits.memory | quote }}
            cpu: {{ .Values.fluentbit.resources.limits.cpu | quote }}
        env:
            - name: TARGET_IP
              value: "127.0.0.1"
            - name: TARGET_PORT
              value: "8888"
            - name: "traceLevel"
              value: "trace"
            - name: "logRetention"
              value: "2"
            - name: "logPath"
              value: "/opt/log"
            - name: "VNFTYPE"
              value: "{{ .Values.global.vnftype }}"
            - name: "VNFNAME"
              value: "{{ .Values.global.vnfname }}"
            - name: "VNFCTYPE"
              value: "{{ .Values.global.vnfctype }}"
            - name: "VNFCNAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
        volumeMounts:
            - name: shared-data
              mountPath: /var/log
            - name: shared-data-envoy
              mountPath: /var/DebugTrace/EnvoySideCar
            - name: config-volume
              mountPath: /fluent-bit/etc

      - name: envoy-sidecar
        {{- include "envoysidecar.image" . | indent 8 }}
        imagePullPolicy: {{ .Values.image.envoy.pullPolicy }}
        securityContext:
          runAsUser: 70
        resources:
          requests:
            memory: {{ .Values.envoysidecar.resources.requests.memory | quote }}
            cpu: {{ .Values.envoysidecar.resources.requests.cpu | quote }}
          limits:
            memory: {{ .Values.envoysidecar.resources.limits.memory | quote }}
            cpu: {{ .Values.envoysidecar.resources.limits.cpu | quote }}
        command: ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
        ports:
          - containerPort: 8080
            protocol: TCP
        volumeMounts:
          - name: config
            mountPath: /etc/envoy
          - name: certs
            mountPath: /certs
          - name: shared-data-envoy
            mountPath: /var/DebugTrace/EnvoySideCar
        env:
          - name: secretuserzts
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.casecret }}
                key: username
          - name: secretpasswordzts
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.casecret }}
                key: password
          - name: CNNAME
            value: "custommetric-service-{{ .Values.global.clustername }}.service.{{ .Values.global.datacenter }}.{{ .Release.Namespace }}.svc.cluster.local"
          - name: CASERVICEFQDN
            value: caserverservice.{{ .Release.Namespace }}.svc.cluster.local
          - name: "EPS_ADDR"
            value: "localhost"
          - name: "EPS_PORT"
            value: "6061"
          - name: "DATACENTER"
            value: "{{ .Values.global.datacenter }}"
          - name: "CLUSTERNAME"
            value: "{{ .Values.global.clustername }}"
          - name: "METADATA_MAX_RELEASE"
            value: "{{ .Values.global.metadata_max_release }}"
          - name: "METADATA_MIN_RELEASE"
            value: "{{ .Values.global.metadata_min_release }}"
          - name: "VNFTYPE"
            value: "{{ .Values.global.vnftype }}"
          - name: "VNFNAME"
            value: "{{ .Values.global.vnfname }}"
          - name: "VNFCTYPE"
            value: "{{ .Values.global.vnfctype }}"
          - name: "traceLevel"
            value: "{{ .Values.global.counteralarmtracelevel }}"
          - name: "CHANNEL_BUFFER_SIZE"
            value: "{{ .Values.countersenv.channelbuffsize }}"

      - name: "registrationcontainer"
        {{- include "consulregistrationsidecar.image" . | indent 8 }}
        imagePullPolicy: {{ .Values.image.consulregistration.pullPolicy }}
        securityContext:
          runAsUser: 11
        resources:
          requests:
            memory: {{ .Values.registration.resources.requests.memory | quote }}
            cpu: {{ .Values.registration.resources.requests.cpu | quote }}
          limits:
            memory: {{ .Values.registration.resources.limits.memory | quote }}
            cpu: {{ .Values.registration.resources.limits.cpu | quote }}
        env:
        - name: "SDSFQDN"
          value: "127.0.0.1"
        - name: "ZTSNAME"
          value: {{ .Values.global.clustername }}
        - name: "SERVICENAME"
          value: "custommetric-service"
        command: ["sh","consulreg.sh"]

      - name: {{ .Values.containers.consulagentName }}
        {{- include "consulagentsidecar.image" . | indent 8 }}
        imagePullPolicy: {{ .Values.image.consul.pullPolicy }}
        securityContext:
          runAsUser: 70
        resources:
          requests:
            memory: {{ .Values.consulagent.resources.requests.memory | quote }}
            cpu: {{ .Values.consulagent.resources.requests.cpu | quote }}
          limits:
            memory: {{ .Values.consulagent.resources.limits.memory | quote }}
            cpu: {{ .Values.consulagent.resources.limits.cpu | quote }}
        command: ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
        env:
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: PODNAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            value: {{ .Release.Namespace }}
          - name: NODE_NAME
            value: {{ .Values.consulmetadata.name }}
          - name: NODE_SERVICE_NAME
            value: {{ .Values.consulserver.servicename }}
          - name: SERVICE_DOMAIN_NAME
            value: {{ .Values.consulagentenv.servicedomainName }}
          - name: DOMAIN_NAME
            value: "{{ .Release.Namespace }}.svc.cluster.local"
          - name: DATACENTER_VALUE
            value: {{ .Values.global.datacenter }}
          - name: CLIENT_BIND_IP
            value: {{ .Values.consulagentenv.agentbindip }}
        volumeMounts:
              - name: data
                mountPath: /tmp/consul
        ports:
          - containerPort: 8500
            name: ui-port
          - containerPort: 8400
            name: alt-port
          - containerPort: 53
            name: udp-port
          - containerPort: 8600
            name: udp-port-dns
          - containerPort: 8443
            name: https-port
          - containerPort: 8080
            name: http-port
          - containerPort: 8301
            name: serflan
          - containerPort: 8302
            name: serfwan
          - containerPort: 8600
            name: consuldns
          - containerPort: 8300
            name: agent
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: custom-metrics-apiserver
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: custom-metricscheck-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups: [""]
  resources: ["pods","secrets"]
  verbs: ["get", "watch", "list","delete","patch","update"]
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:  ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']
- apiGroups:
  - apps
  resources:
  - statefulsets/scale
  verbs:  ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']

- apiGroups: ['']
  resources:
  - pods/exec
  verbs: ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']
- apiGroups: ['']
  resources:
  - pods/attach
  verbs: ['create', 'delete', 'deletecollection', 'get', 'list', 'patch', 'update', 'watch']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: custom-metricscheckbinding-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: custom-metricscheck-{{ .Release.Name }}
subjects:
- kind: ServiceAccount
  name: custom-metrics-apiserver
  namespace: {{ .Release.Namespace }}
