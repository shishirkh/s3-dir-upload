---
##
## Common, cluster-level values
##

## Image Registry
global:
  imageRegistry: "bcmt-registry:5000/corepaas-docker-local.bhisoj70.apac.nsn-net.net"
  postheal: 0
  postrestore: 0
  jobtimeout: 600
  metadata_max_release: "19.0"
  metadata_min_release: "0.5SP1"
  vnftype: "ZTS"
  clustername: "zts1"
  vnfctype: "SS"

lcm:
  heal:
    timeout: 300

name: 
 podname: secretstore-mariadb

image: 
  mariadb: 
    dockerTag: 4.14-2.1895
    pullPolicy: IfNotPresent
  mariadbmetrics: 
    dockerTag: v0.11.0
    pullPolicy: IfNotPresent
  maxscale:   
    dockerTag: 4.8-3.1335
    pullPolicy: IfNotPresent
  elector:
    dockerTag: 0.5-2.1520
    pullPolicy: IfNotPresent
  admin:
    dockerTag: 4.14-2.1895
    pullPolicy: IfNotPresent
  cbura:
    dockerTag: 1.0.3-1665
    pullPolicy: IfNotPresent

## RBAC enabled flag
rbac_enabled: true

## If cluster_name not specified, the release name will be used
#cluster_name: "my-cluster"
## Cluster Type is one of master-slave, master-master, galera, simplex
cluster_type: "galera"

## Times (in minutes) to wait for other pods to come up during pod restart:
# Maximum time pod should wait for all other pods to become available
max_node_wait: 15
# Maximum time (in seconds) pod should wait for additional pods after quorum
# reached.  To continue immediately after quorum reached, set to 0.
quorum_node_wait: 120

## Speficies the type of anti-affinity for scheduling pods to nodes.
## If hard, pods cannot be scheduled together on nodes, if soft,
## best-effort to avoid sharing nodes will be done
nodeAntiAffinity: soft

## Indicates if passwords should be displayed by the helm NOTES - which
## are displayed when helm install completes.
## displayPasswords is one of never, if-generated, always
displayPasswords: "if-generated"

## Values on how to expose services
services:
  ##
  ## MySQL service exposes the mysql database service
  ##
  mysql:
    ## If not set, will be <release>-mysql
    name: secretstore-mariadb
    ## By default, set to ClusterIP to expose database only within cluster
    ## Set as NodePort to expose database externally
    type: ClusterIP
    ## If set to NodePort, optionally set a specific nodePort port to use
    ## instead of having one assigned by the infrastructure.  Ignored if
    ## not using NodePort, random assigned if commented out.
    ## NOTE:  If assigning nodePort here, you must ensure that the port
    ##        is not currently assigned in the assignment range.
    # nodePort for base mysql service (or maxscale rwSplit service)
    #nodePort:
    # nodePort for maxscale readOnly service
    #nodePort_readonly:
    # nodePort for maxscale masterOnly service
    #nodePort_mstronly:

    ## mariadb-exporter metrics port (used if mariadb.metrics is enabled)
    exporter_port: 9104

  ##
  ## MariaDB Master exposes the pod that is master
  ## (only if using MaxScale and geo_redundancy.enabled)
  ##
  mariadb_master:
    ## If not set, will be <release>-mariadb-master
    #name:
    ## Set as NodePort to expose master externally for replication among
    ## Datacenters
    type: NodePort
    ## If set to NodePort, optionally set a specific nodePort port to use
    ## instead of having one assigned by the infrastructure.  Ignored if
    ## not using NodePort, random assigned if commented out.
    ## NOTE:  If assigning nodePort here, you must ensure that the port
    ##        is not currently assigned in the assignment range.
    #nodePort: 

  ##
  ## Maxscale exposes the administrative REST API interface of Maxscale
  ## (only if using MaxScale)
  ## Enabling geo-redundancy will automatically set type to "NodePort".
  ##
  maxscale:
    ## If not set, will be <release>-maxscale
    #name:
    ## Set as NodePort to expose maxscale service externally 
    type: ClusterIP
    port: 8989
    ## If set to NodePort, optionally set a specific nodePort port to use
    ## instead of having one assigned by the infrastructure.  Ignored if
    ## not using NodePort, random assigned if commented out.
    ## NOTE:  If assigning nodePort here, you must ensure that the port
    ##        is not currently assigned in the assignment range.
    #nodePort: 

    ## maxscale-exporter metrics port (used if maxscale.metrics is enabled)
    exporter_port: 9195

  ##
  ## Admin exposes the admin container DB (redis.io) interface to all
  ## cluster pods.  (only if not Simplex)
  ##
  admin:
    ## If not set, will be <release>-admin
    #name:
    type: ClusterIP

##
## Values specific to the MariaDB (server)
##
mariadb:
  image:
    name: "cmdb/mariadb"
    tag: "4.14-2.1895"
    pullPolicy: IfNotPresent

  ## The number of MariaDB pods to create
  count: 3

  ## Termination grace period (in seconds).  Defaults to 30 seconds.
  ## Set higher if a Master switchover can take longer than 30 seconds.
  #terminationGracePeriodSeconds: 30

  ## Perform automatic tc-heuristic-recover of the database on pod restarts.
  ## Set to one of the following:
  ##   rollback - perform auto rollback of uncommitted transactions
  ##   commit   - perform auto commit of uncommitted transactions
  ##   none     - disable automatic tc-hauristic-recover
  ## Defaults to rollback for non-simplex deployments, none for simplex.
  #heuristic_recover: rollback

  ## Interval (in seconds) when clean-logs should be performed on Master to
  ## cleanup binlogs that have been replicated to all slaves
  clean_log_interval: 3600

  ## Enable/disable server audit logging.
  ## If enabled, set events which will be logged.
  ## ref: https://mariadb.com/kb/en/library/mariadb-audit-plugin-log-settings/
  audit_logging:
    enabled: true
    events: "CONNECT,QUERY_DCL,QUERY_DDL"

  ## Use TLS for data in flight to/from client
  ## If using certificates, populate the certicate names in the certificates
  ## section in the secret that is created and specify the secret resource
  ## name in the certificates.secret name.  Note that the secret resource
  ## containing all the certificate files must be pre-populated before
  ## CMDB deployment.
  use_tls: false
  certificates:
    client_ca_cert:     client_ca-cert.pem
    server_ca_cert:     server_ca-cert.pem
    client_cert:        client-cert.pem
    client_key:         client-key.pem
    server_cert:        server-cert.pem
    server_key:         server-key.pem
    secret:

  ## Resource QOS (per MariaDB container)
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
    limits:
      memory: 4096Mi
      cpu: 5000m

  ## Node tolerations for mariadb scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []
  ## Node labels for mariadb pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}
  ## BCMT nodeAffinity rules (mutually-exclusive with nodeSelector above): 
  ## Default to deploy mariadb pods to worker nodes (recommended). 
  nodeAffinity:
    enabled: true
    key: is_worker
    value: true

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 1Gi
    storageClass: "glusterfs-storageclass"
    resourcePolicy: delete
    preserve_pvc: false 
    backup:
      enabled: true
      storageClass: "glusterfs-storageclass"
      accessMode: ReadWriteOnce
      size: 1Gi 
      resourcePolicy: delete
      preserve_pvc: false
      dir: /mariadb/backup


  ## A base64 encoded password.
  ## If not provided a random password will be generated.
  #root_password:

  ## If root user should be allowed from all hosts
  allow_root_all: false

  ## List of databases to be created
  databases:
    - name: vault
      character_set: keybcs2
      collate: keybcs2_bin
  #  - name: anotherdb

  ## List of users to be created
  users:
    - name: vault
      # base64 encoded
      password:  dmF1bHQK
      host: "%"
      privilege: ALL
      object: "vault.*"
  #    #if use_tls set, require SSL/X509 or not
      requires: ""
      with: "GRANT OPTION"

  ## A customized mysqld.conf to import
  mysqld_site_conf: |-
    [mysqld]
    userstat = on
    innodb_buffer_pool_instances=1
    innodb_buffer_pool_size=209715200
    innodb_buffer_pool_chunk_size=209715200
    skip-name-resolve=1

  ## Replication - Are these supported to be changed, or remove?
  ## The replication username to use in the database (default: repl@b.c)
  repl_user: "repl@b.c"
  ## A base64 encoded password for the replication user in the database
  ## Default password used here, user should change when deploying
  ## IMPORTANT: When deploying a geo-redundant solution, must use the same
  ##            repl_user/repl_user_password for both sites, so you MUST
  ##            define repl_user_password here when deploying geo-redundant.
  ## UNCOMMENT this and set base64 encoded password if deploying with geo_redundancy.enabled=true
  repl_user_password: "cmVwbGJjNDU2Nw=="

  ## metrics
  metrics:
    enabled: false

    user: exporter
    ## Provide base64 encoded password. If empty random password will be generated.
    #metrics_password: 
    image:
      name: "prom/mysqld-exporter"
      tag: "v0.11.0"
      pullPolicy: IfNotPresent

    ## Note that prometheus.io/port is specified in mariadb-metrics-service
    annotations:
      prometheus.io/scrape: "true"

    ## Resource QOS (per MariaDB-Metrics container)
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      #limits:
      #  memory: 256Mi
      #  cpu: 250m

  ## Grafana dashboard
  dashboard:
    enabled: false

##
## Values specific to the MaxScale (proxy)
##
maxscale:
  image:
    name: "cmdb/maxscale"
    tag: "4.14-2.1895"
    pullPolicy: IfNotPresent

  ## The number of MaxScale pods
  count: 0

  ## Termination grace period (in seconds).  Defaults to 30 seconds.
  #terminationGracePeriodSeconds: 30

  ## Master Switchover timeout when Master pod is being deleted.
  ## This is used on mariadb preStop hook (defaults to 30 seconds)
  masterSwitchoverTimeout: 30

  ## Resource QOS (per MaxScale container)
  resources:
    requests:
      memory: 256Mi
      cpu: 250m
    #limits:
    #  memory: 512Mi
    #  cpu: 500m

  ## Node tolerations for maxscale scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ## These values should not be changed.
  tolerations:
    - key: 'is_edge'
      operator: 'Equal'
      value: 'true'
      effect: 'NoExecute'

  ## Node labels for maxscale pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector 
  nodeSelector: {}
  ## BCMT nodeAffinity rules (mutually-exclusive with nodeSelector above):
  ## Default to deploy maxscale pods to edge nodes (recommended).
  ## Set to is_worker to deploy maxscale pods to worker nodes (not recommended).
  nodeAffinity:
    enabled: true
    key: is_edge
    value: true

  ## The maxscale username to use in the database
  maxscale_user: maxscale
  ## A base64 encoded password for the maxscale user in the database
  ## Default password used here, user should change when deploying
  ## IMPORTANT: When deploying a geo_redundant solution, must use the same
  ##            maxscale_user/maxscale_user_password for both sites, so you MUST
  ##            define maxscale_user_password here when deploying geo_redundant.
  ## UNCOMMENT this and set base64 encoded password if deploying with geo_redundancy.enabled=true
  #maxscale_user_password: "bWF4YmM0NTY3"

  ## Maxscale optional listeners/service ports to be configured
  ## The default listener/service is the ReadWriteSplit listener:
  ##   rwSplit    - writes to master, reads distributed to slaves (3306)
  ## Additionally the following listener/services can be configured:
  ##   readOnly   - read-only access load-balanced between all slaves (3307)
  ##   masterOnly - read-write access directed only to current Master (3308)
  ##   maxInfo    - metrics scrape port if maxscale metrics is enabled (8003)
  ##                (will be auto-enabled if maxscale.metrics is true)
  ## The listener can be disabled by commenting out or setting port to '0'.
  listeners:
    rwSplit: 3306
    readOnly: 3307
    #masterOnly: 3308
    #maxInfo: 8003

  ## A customized maxscale configuration to import
  maxscale_site_conf: |-
    [maxscale]
    threads = auto
    query_retries = 2
    query_retry_timeout = 10

  ##
  ## Lists of SQL to inject at certain MaxScale events
  ##
  sql:
    ## Mariadb Node promoted to master
    promotion: []

    ## Mariadb Node demoted to slave
    demotion: []

  ## leader-elector
  elector:
    image:
      name: "osdb/leader-elector"
      tag: "0.5-3"
      pullPolicy: IfNotPresent

    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      #limits:
      #  memory: 256Mi
      #  cpu: 250m

  ## metrics
  metrics:
    enabled: false

    image:
      name: "cmdb/maxscale-exporter"
      tag: "0.2.2-1.1895"
      pullPolicy: IfNotPresent

    ## Note that prometheus.io/port is specified in maxscale-metrics-service
    annotations:
      prometheus.io/scrape: "true"

    ## Resource QOS (per MaxScale-Metrics container)
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      #limits:
      #  memory: 256Mi
      #  cpu: 250m
#
##
## Geo-redundancy replication values
## (Requires MaxScale, e.g. maxscale.count > 0)
##
geo_redundancy:
  ## Only enable geo_redundancy for multiple datacenters
  enabled: false

  ## Values used to setup replication properly among sites and prevent
  ## id generation conflicts
  ## The (1-based) index of this site - each site much have unique indes
  ## (Only 1 or 2 supported currently)
  site_index: 1

  ## Threshold (seconds) at which to alarm on lag between datacenters
  lag_threshold: 30

  ## Interval (minutes) at which to purge slave logs
  slave_purge_interval: 60

  ##
  ## Remote Datacenter definitions
  ## The maxscale and master definitions in this section represent the
  ## IP and port of the associated service at the remote datacenter.
  ## The IP:port here can be in any one of the following forms:
  ##   IPv4:port        - IPv6 address and port
  ##   "[IPv6]:port"    - IPv6 address and port (quotes needed)
  ##   FQDN:port        - Fully qualified domain name and port
  ## IPv6 will be the preferred family in a dual-stack installation,
  ## otherwise IPv4 will be used.
  ##
  remote:
    ## Name to associate with remote datacenter
    name: remote

    ## MaxScale node at remote datacenter
    maxscale:

    ## Master MariaDB node at remote datacenter
    master:

    ## mariadb-master-remote ClusterIP for replicating to remote DC
    ## You must set this to the original service IP assigned by kubernetes
    ## to the mariadb-master-remote service if re-deploying charts using
    ## preserve PVC.  If unset, the service IP will be autogenerated.
    #master_remote_service_ip:

##
## Values specific to the CMDB Administrative container
## (used for lifecycle and administrative Jobs)
##
admin:
  image:
    name: "cmdb/admin"
    tag: "4.14-2.1895"
    pullPolicy: IfNotPresent

  ## Resource QOS (per Admin container)
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
    limits:
      memory: 4096Mi
      cpu: 5000m

  ## Node tolerations for admin scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []
  ## Node labels for admin pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}
  ## BCMT nodeAffinity rules (mutually-exclusive with nodeSelector above):
  ## Default to deploy admin pods to worker nodes (recommended). 
  nodeAffinity:
    enabled: true
    key: is_worker
    value: true 

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    #enabled: true
    accessMode: ReadWriteOnce
    size: 1Gi
    storageClass: "glusterfs-storageclass"
    resourcePolicy: delete

  ## A recovery flag.  If changed, will trigger a heal of the database to occur
  #recovery: none

  ## Set to true to change update config behavior to cause statefulset update
  ## (resulting in rolling pod restarts) when mariadb and maxscale configuration
  ## is changed.  Default behavior is to not affect statefulset and services
  ## will be restarted within the pod.  
  configAnnotation: false

  ## Should auto-heal be enabled?
  ## This will enable automated heal operations on cluster (Galera supported).
  ## the pauseDelay is how long (seconds) to wait to re-enable auto-heal after
  ## the cluster comes [back] up.
  autoHeal:
    enabled: true
    pauseDelay: 900

  ## Set to 'yes' for quick install deployment.  This will tell the post-install
  ## hook to not wait for SDC to come up and not wait for pods to start.
  ## It is highly recommended that this value be left blank however if you are
  ## deploying a large number of charts you can set this to 'yes' to speed up
  ## deployment.  Setting to 'yes' will not discover pods that fail to start
  ## and may not set initial SDC values.
  quickInstall: ""

  ## If set, administrative jobs will be more verbose to stdout (kubectl logs)
  debug: false 
  ## If debug is true, you can add a termination delay to all of the pre/port
  ## job hooks as follows (time in seconds).  To terminate early, create a
  ## /tmp/exit file in the container [with exit value if want to override].
  ## Delay will not apply to pre-delete job since that is where old jobs are
  ## deleted and it will delete itself in the process.
  #jobDelay: 0
  postDeleteDelay: 300
  hook_delete_policy: "hook-succeeded"
  ## Specify timeout (in seconds) for each job execution.  If job timeout
  ## occurs. the job will fail, however the job process will run to completion.
  ## Set to 0 to disable job timing operations.
  preInstallTimeout: 120
  postInstallTimeout: 900
  preUpgradeTimeout: 180
  postUpgradeTimeout: 1800
  preDeleteTimeout: 120
  postDeleteTimeout: 180

  ## The activeDeadlineSeconds applies to the duration of the job, no matter
  ## how many Pods are created.  Once a Job reaches activeDeadlineSeconds, the
  ## Job and all of its Pods are terminated.  The result is that the job has a
  ## status with reason: DeadlineExceeded.  It's used in pre-upgrade hook to
  ## prevent too many failed pods being started in failure cases.
  activeDeadlineSeconds: 120 

  ## Name of a Secret (in our same namespace) to be used for performing
  ## the password change of database user(s).
  ## The secret can contain any number of data items, confirming to the
  ## convention of user_<username>, and the contents of the  
  ## If changed, and the named secret exists, the password change will be
  ## attempted.  After a successful password change, the secret will be
  ## automatically deleted. If the password change fails, the secret will
  ## be marked as invalid, thus causing any future upgrades to ignore
  ## this secret.  Future attempts (after failure) must recreate the 
  ## secret for it to be processed.
  #pwChangeSecret: ""

hooks:
  ## Exposes the hook-delete-policy.  By default, this is set to delete the
  ## hooks only upon success or prior to creation.  This can also be unset to
  ## avoid hook deletion for troubleshooting and debugging purposes
  deletePolicy: "hook-succeeded, before-hook-creation"

  ## Here you can disable the pre/post-upgrade or pre-post-install jobs.
  ## This is useful for umbrella charts where you don't want the CMDB upgrade
  ## jobs to run when the parent chart upgrade is performed.
  #preInstallJob: "disable"
  #postInstallJob: "disable"
  #preUpgradeJob: "disable"
  #postUpgradeJob: "disable"
  #preDeleteJob: "disable"
  #postDeleteJob: "disable"

## ---------------------------
## CBUR Parameters
## ---------------------------

cbur:
  enabled: true
  ## Exposes jobhookenable to control BrPolicy behaviour for galera
  ## When enabled, no action in postRestoreCmd and postrestore job hook for
  ## helm restore should run. When disabled, postRestoreCmd is executed and
  ## subsequent out-of-band helm heal is required.
  ## Interim solution for CSFS-12078, set to disabled in ComPaas.
  jobhookenable: true
  ## defines the backup storage options, i.e. local, NetBackup, S3, Avamar.
  backendMode: AVAMAR
  ## allows user to schedule backups
  cronSpec: "0 0 * * *"
  ## defines how many backup copies should be saved
  maxiCopy : 5
  image:
    name: "um/cbura"
    tag: "1.0.3-1665"
    pullPolicy: "IfNotPresent"
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
    runAsGroup: 1000

  prebackup: 0
  postbackup: 0
  prerestore: 0
  postrestore: 0
  jobtimeout: 600
 
  resources:
    requests:
      memory: 16Mi
      cpu: 10m
    limits:
      memory: 4096Mi
      cpu: 1000m
